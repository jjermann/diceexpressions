//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DensityExpressionGrammar.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DensityExpressionGrammarParser : Parser {
	public const int
		NUMBER=1, VARIABLE=2, LPAREN=3, RPAREN=4, PLUS=5, MINUS=6, TIMES=7, DIV=8, 
		GT=9, LT=10, EQ=11, WS=12;
	public const int
		RULE_compileUnit = 0, RULE_equation = 1, RULE_expression = 2, RULE_term = 3, 
		RULE_factor = 4, RULE_atom = 5, RULE_number = 6, RULE_variable = 7, RULE_relop = 8;
	public static readonly string[] ruleNames = {
		"compileUnit", "equation", "expression", "term", "factor", "atom", "number", 
		"variable", "relop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", 
		"'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "VARIABLE", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", 
		"DIV", "GT", "LT", "EQ", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DensityExpressionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DensityExpressionGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(DensityExpressionGrammarParser.Eof, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 18; expression();
				}
				}
				State = 21;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << VARIABLE) | (1L << LPAREN) | (1L << PLUS) | (1L << MINUS))) != 0) );
			State = 23; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterEquation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitEquation(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_equation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; expression();
			State = 26; relop();
			State = 27; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(DensityExpressionGrammarParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(DensityExpressionGrammarParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(DensityExpressionGrammarParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(DensityExpressionGrammarParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; term();
			State = 34;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 30;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 31; term();
					}
					} 
				}
				State = 36;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public ITerminalNode[] TIMES() { return GetTokens(DensityExpressionGrammarParser.TIMES); }
		public ITerminalNode TIMES(int i) {
			return GetToken(DensityExpressionGrammarParser.TIMES, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(DensityExpressionGrammarParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(DensityExpressionGrammarParser.DIV, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; factor();
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TIMES || _la==DIV) {
				{
				{
				State = 38;
				_la = _input.La(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 39; factor();
				}
				}
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(DensityExpressionGrammarParser.PLUS, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(DensityExpressionGrammarParser.MINUS, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_factor);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(PLUS);
				State = 46; factor();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(MINUS);
				State = 48; factor();
				}
				break;
			case NUMBER:
			case VARIABLE:
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(DensityExpressionGrammarParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DensityExpressionGrammarParser.RPAREN, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atom);
		try {
			State = 58;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; number();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; variable();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54; Match(LPAREN);
				State = 55; expression();
				State = 56; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DensityExpressionGrammarParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(DensityExpressionGrammarParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(DensityExpressionGrammarParser.EQ, 0); }
		public ITerminalNode GT() { return GetToken(DensityExpressionGrammarParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(DensityExpressionGrammarParser.LT, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDensityExpressionGrammarListener typedListener = listener as IDensityExpressionGrammarListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << EQ))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE\x45\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x3\x2\x6\x2\x16\n\x2\r\x2\xE\x2\x17\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4#\n\x4\f\x4\xE\x4&\v\x4\x3\x5\x3"+
		"\x5\x3\x5\a\x5+\n\x5\f\x5\xE\x5.\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5"+
		"\x6\x35\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a=\n\a\x3\b\x3\b\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x2\x2\x2\v\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x2\x5\x3\x2\a\b\x3\x2\t\n\x3\x2\v\r\x42\x2\x15\x3\x2\x2\x2"+
		"\x4\x1B\x3\x2\x2\x2\x6\x1F\x3\x2\x2\x2\b\'\x3\x2\x2\x2\n\x34\x3\x2\x2"+
		"\x2\f<\x3\x2\x2\x2\xE>\x3\x2\x2\x2\x10@\x3\x2\x2\x2\x12\x42\x3\x2\x2\x2"+
		"\x14\x16\x5\x6\x4\x2\x15\x14\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17\x15\x3"+
		"\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x1A\a\x2\x2\x3\x1A"+
		"\x3\x3\x2\x2\x2\x1B\x1C\x5\x6\x4\x2\x1C\x1D\x5\x12\n\x2\x1D\x1E\x5\x6"+
		"\x4\x2\x1E\x5\x3\x2\x2\x2\x1F$\x5\b\x5\x2 !\t\x2\x2\x2!#\x5\b\x5\x2\""+
		" \x3\x2\x2\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\a\x3\x2\x2\x2"+
		"&$\x3\x2\x2\x2\',\x5\n\x6\x2()\t\x3\x2\x2)+\x5\n\x6\x2*(\x3\x2\x2\x2+"+
		".\x3\x2\x2\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-\t\x3\x2\x2\x2.,\x3\x2\x2\x2"+
		"/\x30\a\a\x2\x2\x30\x35\x5\n\x6\x2\x31\x32\a\b\x2\x2\x32\x35\x5\n\x6\x2"+
		"\x33\x35\x5\f\a\x2\x34/\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x34\x33\x3\x2"+
		"\x2\x2\x35\v\x3\x2\x2\x2\x36=\x5\xE\b\x2\x37=\x5\x10\t\x2\x38\x39\a\x5"+
		"\x2\x2\x39:\x5\x6\x4\x2:;\a\x6\x2\x2;=\x3\x2\x2\x2<\x36\x3\x2\x2\x2<\x37"+
		"\x3\x2\x2\x2<\x38\x3\x2\x2\x2=\r\x3\x2\x2\x2>?\a\x3\x2\x2?\xF\x3\x2\x2"+
		"\x2@\x41\a\x4\x2\x2\x41\x11\x3\x2\x2\x2\x42\x43\t\x4\x2\x2\x43\x13\x3"+
		"\x2\x2\x2\a\x17$,\x34<";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
