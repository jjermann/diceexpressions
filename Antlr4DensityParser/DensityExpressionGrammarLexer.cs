//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DensityExpressionGrammar.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DensityExpressionGrammarLexer : Lexer {
	public const int
		NUMBER=1, VARIABLE=2, CALL=3, SEP=4, LPAREN=5, RPAREN=6, PLUS=7, MINUS=8, 
		TIMES=9, DIV=10, EQ=11, NEQ=12, LT=13, LE=14, GT=15, GE=16, WS=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "VALID_NUMBER_START", 
		"VALID_NUMBER_CHAR", "CALL", "SEP", "LPAREN", "RPAREN", "PLUS", "MINUS", 
		"TIMES", "DIV", "EQ", "NEQ", "LT", "LE", "GT", "GE", "WS"
	};


	public DensityExpressionGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'.'", "','", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'=='", null, "'<'", null, "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "VARIABLE", "CALL", "SEP", "LPAREN", "RPAREN", "PLUS", 
		"MINUS", "TIMES", "DIV", "EQ", "NEQ", "LT", "LE", "GT", "GE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DensityExpressionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13z\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3\x3\x3\x3"+
		"\a\x3\x37\n\x3\f\x3\xE\x3:\v\x3\x3\x4\x5\x4=\n\x4\x3\x5\x3\x5\x5\x5\x41"+
		"\n\x5\x3\x6\x3\x6\x3\a\x3\a\x5\aG\n\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3"+
		"\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x62\n\x11\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13j\n\x13\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15r\n\x15\x3\x16\x6\x16u\n\x16\r\x16\xE\x16v\x3"+
		"\x16\x3\x16\x2\x2\x2\x17\x3\x2\x3\x5\x2\x4\a\x2\x2\t\x2\x2\v\x2\x2\r\x2"+
		"\x2\xF\x2\x5\x11\x2\x6\x13\x2\a\x15\x2\b\x17\x2\t\x19\x2\n\x1B\x2\v\x1D"+
		"\x2\f\x1F\x2\r!\x2\xE#\x2\xF%\x2\x10\'\x2\x11)\x2\x12+\x2\x13\x3\x2\x4"+
		"\x5\x2\x43\\\x61\x61\x63|\x4\x2\v\f\xF\xF~\x2\x3\x3\x2\x2\x2\x2\x5\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2"+
		"\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x3-"+
		"\x3\x2\x2\x2\x5\x34\x3\x2\x2\x2\a<\x3\x2\x2\x2\t@\x3\x2\x2\x2\v\x42\x3"+
		"\x2\x2\x2\r\x46\x3\x2\x2\x2\xFH\x3\x2\x2\x2\x11J\x3\x2\x2\x2\x13L\x3\x2"+
		"\x2\x2\x15N\x3\x2\x2\x2\x17P\x3\x2\x2\x2\x19R\x3\x2\x2\x2\x1BT\x3\x2\x2"+
		"\x2\x1DV\x3\x2\x2\x2\x1FX\x3\x2\x2\x2!\x61\x3\x2\x2\x2#\x63\x3\x2\x2\x2"+
		"%i\x3\x2\x2\x2\'k\x3\x2\x2\x2)q\x3\x2\x2\x2+t\x3\x2\x2\x2-\x31\x5\v\x6"+
		"\x2.\x30\x5\r\a\x2/.\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2"+
		"\x31\x32\x3\x2\x2\x2\x32\x4\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x38\x5"+
		"\a\x4\x2\x35\x37\x5\t\x5\x2\x36\x35\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36"+
		"\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x6\x3\x2\x2\x2:\x38\x3\x2\x2\x2;"+
		"=\t\x2\x2\x2<;\x3\x2\x2\x2=\b\x3\x2\x2\x2>\x41\x5\a\x4\x2?\x41\x4\x32"+
		";\x2@>\x3\x2\x2\x2@?\x3\x2\x2\x2\x41\n\x3\x2\x2\x2\x42\x43\x4\x33;\x2"+
		"\x43\f\x3\x2\x2\x2\x44G\x5\v\x6\x2\x45G\a\x32\x2\x2\x46\x44\x3\x2\x2\x2"+
		"\x46\x45\x3\x2\x2\x2G\xE\x3\x2\x2\x2HI\a\x30\x2\x2I\x10\x3\x2\x2\x2JK"+
		"\a.\x2\x2K\x12\x3\x2\x2\x2LM\a*\x2\x2M\x14\x3\x2\x2\x2NO\a+\x2\x2O\x16"+
		"\x3\x2\x2\x2PQ\a-\x2\x2Q\x18\x3\x2\x2\x2RS\a/\x2\x2S\x1A\x3\x2\x2\x2T"+
		"U\a,\x2\x2U\x1C\x3\x2\x2\x2VW\a\x31\x2\x2W\x1E\x3\x2\x2\x2XY\a?\x2\x2"+
		"YZ\a?\x2\x2Z \x3\x2\x2\x2[\\\a>\x2\x2\\\x62\a@\x2\x2]^\a@\x2\x2^\x62\a"+
		">\x2\x2_`\a#\x2\x2`\x62\a?\x2\x2\x61[\x3\x2\x2\x2\x61]\x3\x2\x2\x2\x61"+
		"_\x3\x2\x2\x2\x62\"\x3\x2\x2\x2\x63\x64\a>\x2\x2\x64$\x3\x2\x2\x2\x65"+
		"\x66\a>\x2\x2\x66j\a?\x2\x2gh\a?\x2\x2hj\a>\x2\x2i\x65\x3\x2\x2\x2ig\x3"+
		"\x2\x2\x2j&\x3\x2\x2\x2kl\a@\x2\x2l(\x3\x2\x2\x2mn\a?\x2\x2nr\a>\x2\x2"+
		"op\a>\x2\x2pr\a?\x2\x2qm\x3\x2\x2\x2qo\x3\x2\x2\x2r*\x3\x2\x2\x2su\t\x3"+
		"\x2\x2ts\x3\x2\x2\x2uv\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2wx\x3\x2"+
		"\x2\x2xy\b\x16\x2\x2y,\x3\x2\x2\x2\f\x2\x31\x38<@\x46\x61iqv\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
