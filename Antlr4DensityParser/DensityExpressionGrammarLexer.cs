//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DensityExpressionGrammar.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DensityExpressionGrammarLexer : Lexer {
	public const int
		NUMBER=1, VARIABLE=2, LPAREN=3, RPAREN=4, PLUS=5, MINUS=6, TIMES=7, DIV=8, 
		GT=9, LT=10, EQ=11, WS=12;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "VALID_NUMBER_START", 
		"VALID_NUMBER_CHAR", "SIGN", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", 
		"DIV", "GT", "LT", "EQ", "WS"
	};


	public DensityExpressionGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", 
		"'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "VARIABLE", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", 
		"DIV", "GT", "LT", "EQ", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DensityExpressionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xE[\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\a\x2(\n\x2\f\x2\xE\x2+\v"+
		"\x2\x3\x3\x3\x3\a\x3/\n\x3\f\x3\xE\x3\x32\v\x3\x3\x4\x5\x4\x35\n\x4\x3"+
		"\x5\x3\x5\x5\x5\x39\n\x5\x3\x6\x3\x6\x3\a\x3\a\x5\a?\n\a\x3\b\x3\b\x3"+
		"\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x6\x12V\n\x12\r\x12\xE\x12W\x3\x12"+
		"\x3\x12\x2\x2\x2\x13\x3\x2\x3\x5\x2\x4\a\x2\x2\t\x2\x2\v\x2\x2\r\x2\x2"+
		"\xF\x2\x2\x11\x2\x5\x13\x2\x6\x15\x2\a\x17\x2\b\x19\x2\t\x1B\x2\n\x1D"+
		"\x2\v\x1F\x2\f!\x2\r#\x2\xE\x3\x2\x5\x5\x2\x43\\\x61\x61\x63|\x4\x2--"+
		"//\x5\x2\v\f\xF\xF\"\"Z\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\x11\x3"+
		"\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2"+
		"\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2"+
		"\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x3%\x3\x2\x2\x2\x5,\x3\x2\x2\x2\a"+
		"\x34\x3\x2\x2\x2\t\x38\x3\x2\x2\x2\v:\x3\x2\x2\x2\r>\x3\x2\x2\x2\xF@\x3"+
		"\x2\x2\x2\x11\x42\x3\x2\x2\x2\x13\x44\x3\x2\x2\x2\x15\x46\x3\x2\x2\x2"+
		"\x17H\x3\x2\x2\x2\x19J\x3\x2\x2\x2\x1BL\x3\x2\x2\x2\x1DN\x3\x2\x2\x2\x1F"+
		"P\x3\x2\x2\x2!R\x3\x2\x2\x2#U\x3\x2\x2\x2%)\x5\v\x6\x2&(\x5\r\a\x2\'&"+
		"\x3\x2\x2\x2(+\x3\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\x4\x3\x2\x2\x2"+
		"+)\x3\x2\x2\x2,\x30\x5\a\x4\x2-/\x5\t\x5\x2.-\x3\x2\x2\x2/\x32\x3\x2\x2"+
		"\x2\x30.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x6\x3\x2\x2\x2\x32\x30\x3"+
		"\x2\x2\x2\x33\x35\t\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35\b\x3\x2\x2\x2\x36"+
		"\x39\x5\a\x4\x2\x37\x39\x4\x32;\x2\x38\x36\x3\x2\x2\x2\x38\x37\x3\x2\x2"+
		"\x2\x39\n\x3\x2\x2\x2:;\x4\x33;\x2;\f\x3\x2\x2\x2<?\x5\v\x6\x2=?\a\x32"+
		"\x2\x2><\x3\x2\x2\x2>=\x3\x2\x2\x2?\xE\x3\x2\x2\x2@\x41\t\x3\x2\x2\x41"+
		"\x10\x3\x2\x2\x2\x42\x43\a*\x2\x2\x43\x12\x3\x2\x2\x2\x44\x45\a+\x2\x2"+
		"\x45\x14\x3\x2\x2\x2\x46G\a-\x2\x2G\x16\x3\x2\x2\x2HI\a/\x2\x2I\x18\x3"+
		"\x2\x2\x2JK\a,\x2\x2K\x1A\x3\x2\x2\x2LM\a\x31\x2\x2M\x1C\x3\x2\x2\x2N"+
		"O\a@\x2\x2O\x1E\x3\x2\x2\x2PQ\a>\x2\x2Q \x3\x2\x2\x2RS\a?\x2\x2S\"\x3"+
		"\x2\x2\x2TV\t\x4\x2\x2UT\x3\x2\x2\x2VW\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3"+
		"\x2\x2\x2XY\x3\x2\x2\x2YZ\b\x12\x2\x2Z$\x3\x2\x2\x2\t\x2)\x30\x34\x38"+
		">W\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
